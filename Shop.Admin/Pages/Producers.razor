@page "/producers"
@using Shop.Admin.Services
@using Shop.DataModels.Models
@inject IAdminPanelService AdminPanelService;

<style>
    td {
        vertical-align: center;
    }
    
    .table {
        margin-bottom: 0;
    }
    
    .wide {
        width: 100%;
    }

    .gradient-background {
        background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%);
    }
    
    .card {
      border-radius: 25px;
      padding: 20px;
    }
    
    .card-body {
      margin: 10px;
      border-radius: 25px;
    }

    .custom-dropdown {
        display: block;
        width: 100%;
        height: calc(1.5em + 0.75rem + 2px);
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        color: #495057;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
    }
</style>

@if (ProducerModel == null){
    <p>
        <em>Loading...</em>
    </p>
}
else{
    <div class="card">
        <h4 class="card-header">Add Producer</h4>
        <div class="card-body">
            <EditForm Model="@ProducerModel" OnValidSubmit="SaveProducer">
                <DataAnnotationsValidator/>
                <div class="form-row">
                    <div class="form-group col-6">
                        <label>Name:</label>
                        <InputText @bind-Value="ProducerModel.Name" class="form-control"/>
                        <ValidationMessage For="@(() => ProducerModel.Name)"/>
                    </div>
                    <div class="form-group col-6">
                        <label>Industry:</label>
                        <InputSelect class="custom-dropdown" @bind-Value="ProducerModel.Industry">
                            @foreach (var industry in Enum.GetValues(typeof(EIndustry))){
                                <option value="@industry">@industry</option>
                            }
                        </InputSelect>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-6">
                        <input type="submit" class="btn btn-primary wide" value="Save"/>
                    </div>
                    <div class="form-group col-6">
                        <input type="button" class="btn btn-primary wide" value="Clear" @onclick="ClearForm"/>
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="card-body gradient-background">
            @if (ProducersList == null){
                <p>
                    <em>Loading...</em>
                </p>
            }
            else{
                <table class="table table-striped table-bordered bg-light">
                    <thead>
                    <tr>
                        <th style="width: 15px">Id</th>
                        <th>Name</th>
                        <th>Industry</th>
                        <th style="width: 50px">Edit</th>
                        <th style="width: 50px">Delete</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var producer in ProducersList){
                        <tr>
                            <td>@producer.Id</td>
                            <td>@producer.Name</td>
                            <td>@producer.Industry</td>
                            <td>
                                <button class="btn btn-primary" @onclick="() => EditButtonClick(producer)">Edit</button>
                            </td>
                            <td>
                                <button class="btn btn-danger" @onclick="() => DeleteButtonClick(producer)">Delete</button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
        </div>

    </div>
}

@code{

    [CascadingParameter]
    public EventCallback Notify { get; set; }

    public ProducerModel ProducerModel { get; set; }

    public List<ProducerModel> ProducersList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ProducerModel = new ProducerModel();
        await GetProducers();
    }

    private void ClearForm()
    {
        ProducerModel = new ProducerModel();
    }

    private async Task EditButtonClick(ProducerModel producer) {}

    private async Task DeleteButtonClick(ProducerModel producer) {}

    private async Task GetProducers()
    {
        ProducersList = await AdminPanelService.GetProducers();
    }

    private async Task SaveProducer()
    {
        await AdminPanelService.SaveProducer(ProducerModel);
        await GetProducers();
        ClearForm();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender){
            await Notify.InvokeAsync();
        }
    }

}