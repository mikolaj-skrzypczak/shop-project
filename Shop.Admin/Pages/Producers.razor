@page "/producers"
@using Shop.Admin.Services
@using Shop.DataModels.Models
@inject IAdminPanelService AdminPanelService;

<style>
    .modal {
        position: fixed;
        z-index: 1;
        padding-top: 100px;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        background-color: rgb(0, 0, 0);
        background-color: rgba(0, 0, 0, 0.4);
        display: block;
    }
    
    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 50%;
        overflow: hidden;
    }
    
    .close {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }
    
    .close:hover, .close:focus{
        color: #000;
        text-decoration: none;
        cursor: pointer;
    }

    td {
        vertical-align: center;
    }
    
    .table {
        margin-bottom: 0;
    }
    
    .wide {
        width: 100%;
    }

    .gradient-background {
        background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%);
    }
    
    .card {
      border-radius: 25px;
      padding: 20px;
    }
    
    .card-body {
      margin: 10px;
      border-radius: 25px;
    }

    .custom-dropdown {
        display: block;
        width: 100%;
        height: calc(1.5em + 0.75rem + 2px);
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        color: #495057;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
    }
</style>

@if (ProducerModel == null){
    <p>
        <em>Loading...</em>
    </p>
}
else{
    <div class="card">
        <h4 class="card-header">Add Producer</h4>
        <div class="card-body">
            <EditForm Model="@ProducerModel" OnValidSubmit="SaveProducer">
                <DataAnnotationsValidator/>
                <div class="form-row">
                    <div class="form-group col-6">
                        <label>Name:</label>
                        <InputText @bind-Value="ProducerModel.Name" class="form-control"/>
                        <ValidationMessage For="@(() => ProducerModel.Name)"/>
                    </div>
                    <div class="form-group col-6">
                        <label>Industry:</label>
                        <InputSelect class="custom-dropdown" @bind-Value="ProducerModel.Industry">
                            @foreach (var industry in Enum.GetValues(typeof(EIndustry))){
                                <option value="@industry">@industry</option>
                            }
                        </InputSelect>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-6">
                        <input type="submit" class="btn btn-primary wide" value="Save"/>
                    </div>
                    <div class="form-group col-6">
                        <input type="button" class="btn btn-primary wide" value="Clear" @onclick="ClearForm"/>
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="card-body gradient-background">
            @if (ProducersList == null){
                <p>
                    <em>Loading...</em>
                </p>
            }
            else{
                <table class="table table-striped table-bordered bg-light">
                    <thead>
                    <tr>
                        <th style="width: 15px">Id</th>
                        <th>Name</th>
                        <th>Industry</th>
                        <th style="width: 50px">Edit</th>
                        <th style="width: 50px">Delete</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var producer in ProducersList){
                        <tr>
                            <td>@producer.Id</td>
                            <td>@producer.Name</td>
                            <td>@producer.Industry</td>
                            <td>
                                <button class="btn btn-primary" @onclick="() => EditButtonClick(producer)">Edit</button>
                            </td>
                            <td>
                                <button class="btn btn-danger" @onclick="() => DeleteButtonClick(producer)">Delete</button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
        </div>

    </div>
}
@if (_showEditPopup){
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Edit Producer</h5>
                <span class="close" @onclick="ToggleEditPopup">&times;</span>
            </div>
            <div class="modal-body">
                <EditForm Model="@ProducerToUpdate" OnValidSubmit="UpdateProducer">
                    <DataAnnotationsValidator/>
                    <div class="form-row">
                        <div class="form-group col-6">
                            <label>Name:</label>
                            <InputText @bind-Value="ProducerToUpdate.Name" class="form-control"/>
                            <ValidationMessage For="@(() => ProducerToUpdate.Name)"/>
                        </div>
                        <div class="form-group col-6">
                            <label>Industry:</label>
                            <InputSelect class="custom-dropdown" @bind-Value="ProducerToUpdate.Industry">
                                @foreach (var industry in Enum.GetValues(typeof(EIndustry))){
                                    <option value="@industry">@industry</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                </EditForm>
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Update" @onclick="UpdateProducer"/>
                <input type="button" class="btn btn-primary" value="Cancel" @onclick="ToggleEditPopup"/>
            </div>
        </div>
    </div>
}
@if (_showDeletePopup){
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Delete Producer</h5>
                <span class="close" @onclick="ToggleDeletePopup">&times;</span>
            </div>
            <div class="modal-body">
                Are you sure you want to delete producer <span style="background-color:yellow;">@ProducerToDelete.Name</span>? This action cannot be undone.
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Delete" @onclick="DeleteProducer"/>
                <input type="button" class="btn btn-primary" value="Cancel" @onclick="ToggleDeletePopup"/>
            </div>
        </div>
    </div>
}
@if (_successPopup){
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                Alert <span class="close" @onclick="ToggleSuccessPopup">&times;</span>
            </div>
            <div class="modal-body">
                @_message
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Close" @onclick="ToggleSuccessPopup"/>
            </div>
        </div>
    </div>
}

@code{

    [CascadingParameter]
    public EventCallback Notify { get; set; }

    private ProducerModel ProducerModel { get; set; }

    private List<ProducerModel> ProducersList { get; set; }

    private ProducerModel ProducerToUpdate { get; set; }

    private ProducerModel ProducerToDelete { get; set; }

    private bool _showEditPopup;

    private bool _showDeletePopup;

    private bool _successPopup;

    private string _message = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        ProducerModel = new ProducerModel();
        await GetProducers();
    }

    private void ClearForm()
    {
        ProducerModel = new ProducerModel();
    }

    private async Task EditButtonClick(ProducerModel producer)
    {
        ProducerToUpdate = producer;
        await ToggleEditPopup();
    }

    private void DeleteButtonClick(ProducerModel producer)
    {
        ProducerToDelete = producer;
        ToggleDeletePopup();
    }

    private async Task ToggleEditPopup()
    {
        _showEditPopup = !_showEditPopup;
        if (!_showEditPopup)
        {
            ProducerToUpdate = new ProducerModel();
            await GetProducers();
        }
    }
    
    private void ToggleDeletePopup()
    {
        _showDeletePopup = !_showDeletePopup;
    }
    
    private void ToggleSuccessPopup()
    {
        _successPopup = !_successPopup;
    }

    private async Task GetProducers()
    {
        ProducersList = await AdminPanelService.GetProducers();
    }

    private async Task SaveProducer()
    {
        var flag = await AdminPanelService.SaveProducer(ProducerModel);
        _message = flag 
            ? "Producer saved successfully!" 
            : $"Error while saving producer! Producer with name {ProducerModel.Name} might already exists.";
        ToggleSuccessPopup();
        ProducerModel = new ProducerModel();
        await GetProducers();
    }
    
    private async Task UpdateProducer()
    {
        var flag = await AdminPanelService.UpdateProducer(ProducerToUpdate);
        await ToggleEditPopup();
        _message = flag 
            ? "Producer updated successfully!" 
            : $"Error while updating producer! Producer with name {ProducerToUpdate.Name} might already exists.";
        ToggleSuccessPopup();
        ProducerToUpdate = new ProducerModel();
        await GetProducers();
    }
    
    private async Task DeleteProducer()
    {
        var flag = await AdminPanelService.DeleteProducer(ProducerToDelete);
        ToggleDeletePopup();
        _message = flag 
            ? "Producer deleted successfully!" 
            : "Something went wrong :( Try again!";
        ToggleSuccessPopup();
        ProducerToDelete = new ProducerModel();
        await GetProducers();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender){
            await Notify.InvokeAsync();
        }
    }

}