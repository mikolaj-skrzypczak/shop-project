@page "/products"
@using Shop.Admin.Services
@using Shop.DataModels.Models
@inject IAdminPanelService AdminPanelService;

@if (ProductModel == null){
    <p>
        <em>Loading...</em>
    </p>
}
else{
    <div class="card">
        <h4 class="card-header">Add Product</h4>
        <div class="card-body">
            <EditForm Model="@ProductModel" OnValidSubmit="SaveProduct">
                <DataAnnotationsValidator/>
                <div class="form-row">
                    <div class="form-group col-1">
                        <label>Name:</label>
                    </div>
                    <div class="form-group col-11">
                        <InputText @bind-Value="ProductModel.Name" class="form-control"/>
                        <ValidationMessage For="@(() => ProductModel.Name)"/>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-1">
                        <label>Price:</label>
                    </div>
                    <div class="form-group col-11">
                        <InputNumber @bind-Value="ProductModel.Price" class="form-control"/>
                        <ValidationMessage For="@(() => ProductModel.Price)"/>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-1">
                        <label>Quantity:</label>
                    </div>
                    <div class="form-group col-11">
                        <InputNumber @bind-Value="ProductModel.Quantity" class="form-control"/>
                        <ValidationMessage For="@(() => ProductModel.Price)"/>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-1">
                        <label>Producer:</label>
                    </div>
                    <div class="form-group col-11">
                        <InputSelect required="true" class="custom-dropdown" @bind-Value="ProductModel.ProducerId">
                            @foreach (var producer in ProducersList){
                                <option value="@producer.Id">@producer.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => ProductModel.Id)"/>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-6">
                        <input type="submit" class="btn btn-primary wide" value="Save"/>
                    </div>
                    <div class="form-group col-6">
                        <input type="button" class="btn btn-primary wide" value="Clear" @onclick="ClearForm"/>
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="card-body gradient-background">
            @if (ProductsList == null){
                <p>
                    <em>Loading...</em>
                </p>
            }
            else{
                <table class="table table-striped table-bordered bg-light">
                    <thead>
                    <tr>
                        <th>Name</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Producer</th>
                        <th>Edit</th>
                        <th>Delete</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var product in ProductsList){
                        <tr>
                            <td>@product.Name</td>
                            <td>@product.Price</td>
                            <td>@product.Quantity</td>
                            <td>@GetProducerName(product.ProducerId)</td>
                            <td>
                                <button class="btn btn-primary" @onclick="() => EditButtonClick(product)">Edit</button>
                            </td>
                            <td>
                                <button class="btn btn-danger" @onclick="() => DeleteButtonClick(product)">Delete</button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
        </div>
    </div>
}
@if (_showEditPopup){
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Edit Product</h5>
                <span class="close" @onclick="ToggleEditPopup">&times;</span>
            </div>
            <div class="modal-body">
                <EditForm Model="@ProductToUpdate" OnValidSubmit="UpdateProduct">
                    <DataAnnotationsValidator/>
                    <div class="form-row">
                        <div class="form-group col-2">
                            <label>Name:</label>
                        </div>
                        <div class="form-group col-10">
                            <InputText @bind-Value="ProductToUpdate.Name" class="form-control"/>
                            <ValidationMessage For="@(() => ProductToUpdate.Name)"/>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-2">
                            <label>Price:</label>
                        </div>
                        <div class="form-group col-10">
                            <InputNumber @bind-Value="ProductToUpdate.Price" class="form-control"/>
                            <ValidationMessage For="@(() => ProductToUpdate.Price)"/>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-2">
                            <label>Quantity:</label>
                        </div>
                        <div class="form-group col-10">
                            <InputNumber @bind-Value="ProductToUpdate.Quantity" class="form-control"/>
                            <ValidationMessage For="@(() => ProductToUpdate.Price)"/>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-2">
                            <label>Producer:</label>
                        </div>
                        <div class="form-group col-10">
                            <InputSelect required="true" class="custom-dropdown" @bind-Value="ProductToUpdate.ProducerId">
                                @foreach (var producer in ProducersList){
                                    <option value="@producer.Id">@producer.Name</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => ProductToUpdate.Id)"/>
                        </div>
                    </div>
                </EditForm>
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Update" @onclick="UpdateProduct"/>
                <input type="button" class="btn btn-primary" value="Cancel" @onclick="ToggleEditPopup"/>
            </div>
        </div>
    </div>
}
@if (_showDeletePopup){
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Delete Product</h5>
                <span class="close" @onclick="ToggleDeletePopup">&times;</span>
            </div>
            <div class="modal-body">
                Are you sure you want to delete product <span style="background-color:yellow;">@ProductToDelete.Name</span>
                This action cannot be undone.
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-danger" value="Delete" @onclick="DeleteProduct"/>
                <input type="button" class="btn btn-primary" value="Cancel" @onclick="ToggleDeletePopup"/>
            </div>
        </div>
    </div>
}
@if (_showSuccessPopup){
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                Alert <span class="close" @onclick="ToggleSuccessPopup">&times;</span>
            </div>
            <div class="modal-body">
                @_message
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Close" @onclick="ToggleSuccessPopup"/>
            </div>
        </div>
    </div>
}

@code{

    [CascadingParameter]
    public EventCallback Notify { get; set; }

    private List<ProducerModel> ProducersList { get; set; }

    private ProductModel ProductModel { get; set; }

    private List<ProductModel> ProductsList { get; set; }

    private ProductModel ProductToUpdate { get; set; }

    private ProductModel ProductToDelete { get; set; }

    private bool _showEditPopup;

    private bool _showDeletePopup;

    private bool _showSuccessPopup;

    private string _message = string.Empty;

    private async Task SaveProduct()
    {
        var flag = await AdminPanelService.SaveProduct(ProductModel);
        _message = flag
            ? $"Product {ProductModel.Name} saved successfully!"
            : $"Error while saving product {ProductModel.Name}!";
        ToggleSuccessPopup();
        ProductModel = new ProductModel();
        await GetProducers();
        await GetProducts();
    }

    private async Task UpdateProduct()
    {
        var flag = await AdminPanelService.UpdateProduct(ProductToUpdate);
        await ToggleEditPopup();
        _message = flag
            ? $"Product {ProductToUpdate.Name} updated successfully!"
            : "Error while updating product!";
        ToggleSuccessPopup();
        ProductToUpdate = new ProductModel();
        await GetProducers();
        await GetProducts();
    }

    private async Task DeleteProduct()
    {
        var flag = await AdminPanelService.DeleteProduct(ProductToDelete);
        ToggleDeletePopup();
        _message = flag
            ? $"Product {ProductToDelete.Name} deleted successfully!"
            : "Something went wrong :( Try again!";
        ToggleSuccessPopup();
        ProductToDelete = new ProductModel();
        await GetProducers();
        await GetProducts();
    }

    private async Task GetProducers()
    {
        ProducersList = await AdminPanelService.GetProducers();
    }

    private async Task GetProducts()
    {
        ProductsList = await AdminPanelService.GetProducts();
    }

    private string GetProducerName(int id)
    {
        return ProducersList.FirstOrDefault(x => x.Id == id)?.Name;
    }

    private async Task ToggleEditPopup()
    {
        _showEditPopup = !_showEditPopup;
        if (!_showEditPopup){
            ProductToUpdate = new ProductModel();
            await GetProducts();
            await GetProducers();
        }
    }

    private void ToggleDeletePopup()
    {
        _showDeletePopup = !_showDeletePopup;
    }

    private void ToggleSuccessPopup()
    {
        _showSuccessPopup = !_showSuccessPopup;
    }

    private async Task EditButtonClick(ProductModel product)
    {
        ProductToUpdate = product;
        await ToggleEditPopup();
    }

    private void DeleteButtonClick(ProductModel product)
    {
        ProductToDelete = product;
        ToggleDeletePopup();
    }

    private void ClearForm()
    {
        ProductModel = new ProductModel();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetProducers();
        await GetProducts();
        ProductModel = new ProductModel();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender){
            await Notify.InvokeAsync();
        }
    }
}