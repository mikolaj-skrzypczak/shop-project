@page "/login"
@using Shop.DataModels.CustomModels;
@using Shop.Admin.Services;
@inject IAdminPanelService AdminPanelService;
@inject NavigationManager NavManager;

<style>
    .login-box {
        font-family: 'Open Sans', sans-serif;
        margin: 20px 0 20px 0;
        width: 100%;
        text-align: center;
    }
    
    p{
        font-size: 12px;
        text-decoration: none;
        color: #ffffff;
    }
    
    h1{
        font-size: 1.5em;
        color: #525252;
    }
    
    .box {
        background: white;
        width: 300px;
        border-radius: 6px;
        margin: 0 auto 0 auto;
        padding: 0 0 10px 0;
        border: #2877e9 4px solid;
    }
    
    .email{
        background: #ffffff;
        border: #ccc 1px solid;
        border-bottom: #ccc 2px solid;
        padding: 8px;
        width: 250px;
        color: #525252;
        margin-top: 10px;
        font-size: 1em;
        border-radius: 4px;
    }
    
    .password{
        background: #ecf0f1;
        border: #ccc 1px solid;
        padding: 8px;
        width: 250px;
        font-size: 1em;
        border-radius: 4px;
    }
</style>

<div style="min-height: 400px;">
    <div class="login-box">
        <div class="box">
            <br/>
            <h1>Admin Panel</h1>
            @if (LoginModel != null){
                <EditForm Model="@LoginModel" OnValidSubmit="LoginClick">
                    <DataAnnotationsValidator/>

                    <InputText type="email" name="email" class="email" placeholder="email" @bind-Value="LoginModel.EmailId" autocomplete="off"/>
                    <ValidationMessage For="@(() => LoginModel.EmailId)"/>

                    <InputText type="password" name="password" class="password" placeholder="password" @bind-Value="LoginModel.Password" autocomplete="off"/>
                    <ValidationMessage For="@(() => LoginModel.Password)"/>
                    <br/>
                    <br/>
                    <input type="submit" class="btn-primary" value="Login"/>
                </EditForm>
            }
        </div>
        <div>
            <br/>
            <br/>
            <p style="color: #e52e50">
                <h4> @AlertMessage </h4>
            </p>
        </div>
    </div>
</div>


@code {

    public LoginModel LoginModel { get; set; }

    public string AlertMessage { get; set; }

    private async Task LoginClick()
    {
        var response = await AdminPanelService.AdminLogin(LoginModel);
        if (response.Status){
            NavManager.NavigateTo("/");
        }
        else{
            AlertMessage = response.Message;
        }

    }
    protected override Task OnInitializedAsync()
    {
        LoginModel = new LoginModel();
        return base.OnInitializedAsync();
    }
}