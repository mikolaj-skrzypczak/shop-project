@page "/login"
@using Shop.Admin.Services
@using Shop.DataModels.CustomModels
@inject ProtectedSessionStorage ProtectedSessionStorage;
@inject IAdminPanelService AdminPanelService;
@inject NavigationManager NavManager;


<div style="min-height: 400px;">
    <div class="login-box">
        <div class="box">
            <br/>
            <h1>Admin Panel</h1>
            @if (LoginModel != null){
                <EditForm Model="@LoginModel" OnValidSubmit="LoginClick">
                    <DataAnnotationsValidator/>

                    <InputText type="email" name="email" class="email" placeholder="email" @bind-Value="LoginModel.EmailId" autocomplete="off"/>
                    <ValidationMessage For="@(() => LoginModel.EmailId)"/>

                    <InputText type="password" name="password" class="password" placeholder="password" @bind-Value="LoginModel.Password" autocomplete="off"/>
                    <ValidationMessage For="@(() => LoginModel.Password)"/>
                    <br/>
                    <br/>
                    <input type="submit" class="btn-primary" value="Login"/>
                </EditForm>
            }
        </div>
        <div>
            <br/>
            <br/>
            <p style="color: #e52e50">@AlertMessage</p>
        </div>
    </div>
</div>


@code {

    [CascadingParameter]
    public EventCallback Notify { get; set; }

    private LoginModel LoginModel { get; set; }

    private string AlertMessage { get; set; }

    private async Task LoginClick()
    {
        var response = await AdminPanelService.AdminLogin(LoginModel);
        if (response.Status){
            var userResponse = response.Message;
            await ProtectedSessionStorage.SetAsync("adminKey", value: userResponse);
            await Notify.InvokeAsync();
            NavManager.NavigateTo("/");
        }
        else{
            AlertMessage = response.Message;
        }

    }

    protected override Task OnInitializedAsync()
    {
        LoginModel = new LoginModel();
        return base.OnInitializedAsync();
    }
}